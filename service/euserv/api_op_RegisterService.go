// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package euserv

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/sjones4/eucalyptus-sdk-go/internal/awsutil"
)

type RegisterServiceInput struct {
	_ struct{} `type:"structure"`

	// Host is a required field
	Host *string `locationName:"Host" type:"string" required:"true"`

	// Name is a required field
	Name *string `locationName:"Name" type:"string" required:"true"`

	Partition *string `locationName:"Partition" type:"string"`

	// Port is a required field
	Port *int64 `locationName:"Port" type:"integer" required:"true"`

	// Type is a required field
	Type *string `locationName:"Type" type:"string" required:"true"`
}

// String returns the string representation
func (s RegisterServiceInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RegisterServiceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RegisterServiceInput"}

	if s.Host == nil {
		invalidParams.Add(aws.NewErrParamRequired("Host"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.Port == nil {
		invalidParams.Add(aws.NewErrParamRequired("Port"))
	}

	if s.Type == nil {
		invalidParams.Add(aws.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type RegisterServiceOutput struct {
	_ struct{} `locationName:"RegisterServiceResponseType" type:"structure"`

	RegisteredServices []ServiceId `locationName:"registeredServices" locationNameList:"item" type:"list"`
}

// String returns the string representation
func (s RegisterServiceOutput) String() string {
	return awsutil.Prettify(s)
}

const opRegisterService = "RegisterService"

// RegisterServiceRequest returns a request value for making API operation for
// Eucalyptus Cloud Service Management Service.
//
//    // Example sending a request using RegisterServiceRequest.
//    req := client.RegisterServiceRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/euserv-2010-01-01/RegisterService
func (c *Client) RegisterServiceRequest(input *RegisterServiceInput) RegisterServiceRequest {
	op := &aws.Operation{
		Name:       opRegisterService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RegisterServiceInput{}
	}

	req := c.newRequest(op, input, &RegisterServiceOutput{})
	return RegisterServiceRequest{Request: req, Input: input, Copy: c.RegisterServiceRequest}
}

// RegisterServiceRequest is the request type for the
// RegisterService API operation.
type RegisterServiceRequest struct {
	*aws.Request
	Input *RegisterServiceInput
	Copy  func(*RegisterServiceInput) RegisterServiceRequest
}

// Send marshals and sends the RegisterService API request.
func (r RegisterServiceRequest) Send(ctx context.Context) (*RegisterServiceResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RegisterServiceResponse{
		RegisterServiceOutput: r.Request.Data.(*RegisterServiceOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RegisterServiceResponse is the response type for the
// RegisterService API operation.
type RegisterServiceResponse struct {
	*RegisterServiceOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RegisterService request.
func (r *RegisterServiceResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
